[{"title":"Controller","type":0,"sectionRef":"#","url":"/Lagoon/api/Controller","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Controller","url":"/Lagoon/api/Controller#functions","content":" "},{"title":"ApplyTrait​","type":1,"pageTitle":"Controller","url":"/Lagoon/api/Controller#ApplyTrait","content":"&lt;/&gt; Controller:ApplyTrait(Trait: T) → S&amp;T Applies a traits method(s) and properties to the specified controller. "},{"title":"Logger","type":0,"sectionRef":"#","url":"/Lagoon/api/Logger","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#types","content":" "},{"title":"LogOptions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogOptions","content":"&lt;/&gt; interface LogOptions { Name: string?, Debug: boolean?, Timestamp: boolean?, }  "},{"title":"Properties​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#properties","content":" "},{"title":"LogOptions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogOptions","content":"&lt;/&gt; Logger.LogOptions: LogOptions  "},{"title":"Functions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#functions","content":" "},{"title":"Log​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#Log","content":"&lt;/&gt; Logger:Log( Context: LogContext, ...: any ) → () "},{"title":"Types","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger##","content":""},{"title":"​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogContext","content":"type LogContext = &quot;Debug&quot; | &quot;Info&quot; | &quot;Warn&quot; | &quot;Error&quot; | &quot;Fatal&quot;  Displays message(s) in the output. info Debug logs can change context provided there is a delimeter for example 'Debug/Info' while the primary context will be 'Debug' the displayed context will be 'Info' "},{"title":"JSON","type":0,"sectionRef":"#","url":"/Lagoon/api/JSON","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"JSON","url":"/Lagoon/api/JSON#functions","content":" "},{"title":"Encode​","type":1,"pageTitle":"JSON","url":"/Lagoon/api/JSON#Encode","content":"&lt;/&gt; JSON.Encode(Input: any) → string   "},{"title":"Decode​","type":1,"pageTitle":"JSON","url":"/Lagoon/api/JSON#Decode","content":"&lt;/&gt; JSON.Decode(Input: string) → any  "},{"title":"Service","type":0,"sectionRef":"#","url":"/Lagoon/api/Service","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Service","url":"/Lagoon/api/Service#functions","content":" "},{"title":"ApplyTrait​","type":1,"pageTitle":"Service","url":"/Lagoon/api/Service#ApplyTrait","content":"&lt;/&gt; Service:ApplyTrait(Trait: T) → S&amp;T Applies a traits method(s) and properties to the specified service. "},{"title":"Lagoon","type":0,"sectionRef":"#","url":"/Lagoon/api/Lagoon","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#functions","content":" "},{"title":"MakeService​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#MakeService","content":"&lt;/&gt; Lagoon.MakeService(Module: T) → () Takes in a table for the 'Module' parameter and wraps the module with a Lagoon Service. Usage: MyService.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyService = {} MyService.IsService = true function MyService.PrintFromServer() print(&quot;Hello from the server!&quot;) end return Lagoon.MakeService(MyService)   "},{"title":"MakeController​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#MakeController","content":"&lt;/&gt; Lagoon.MakeController(Module: T) → () Takes in a table for the 'Module' parameter and wraps the module with a Lagoon Controller. Usage: MyController.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyController = {} MyController.IsController = true function MyController.PrintFromClient() print(&quot;Hello from the client!&quot;) end return Lagoon.MakeController(MyController)   "},{"title":"MakeTrait​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#MakeTrait","content":"&lt;/&gt; Lagoon.MakeTrait(Module: T) → () Creates a Trait using the module parameter, the created trait can be applied to services/controllers using Service:ApplyTrait(MyCustomTrait) or Controller:ApplyTrait(MyCustomTrait) Usage: MyCustomTrait.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = {} function MyCustomTrait.Sum(a: number, b: number) return a + b end return Lagoon.MakeTrait(MyCustomTrait) MyController.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = require(Path.To.MyCustomTrait) local MyController = {} MyController.IsController = true function MyController.PrintFromClient() print(&quot;Hello from the client!&quot;) end return Lagoon.MakeController(MyController):ApplyTrait(MyCustomTrait)   "},{"title":"Load​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#Load","content":"&lt;/&gt; Lagoon.Load(Parent: Instance ) → () Requires and initializes the Parent's children.  "},{"title":"Get​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#Get","content":"&lt;/&gt; Lagoon.Get(Name: string) → any  warning Function provides no typesafety. "},{"title":"Serializer","type":0,"sectionRef":"#","url":"/Lagoon/api/Serializer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Serializer","url":"/Lagoon/api/Serializer#functions","content":" "},{"title":"Serialize​","type":1,"pageTitle":"Serializer","url":"/Lagoon/api/Serializer#Serialize","content":"&lt;/&gt; Serializer.Serialize(...: any) → { [1]: string, ...: Instance } Utilizes Squash for packet serialization and adds a byte to the beginning of a packet section to indicate what type the object was. Packet Section: &lt;section_type&gt;&lt;data&gt; There are special section types specifically for Instances and Tables Instance: &lt;section_type&gt;&lt;index&gt; - The index represents a point in the packet after the packet string` Table: &lt;section_type&gt;&lt;encoded_table&gt; - The table is encoded using Roblox's JSON functions (This might be changed in the future to use a type of lossless compression to save on bandwidth) From some basic tests that were run using a packet that was sending an instance reference and a bunch of relevant color information &amp; CFrames saved around ~1.1KB in bandwidth.  "},{"title":"Deserialize​","type":1,"pageTitle":"Serializer","url":"/Lagoon/api/Serializer#Deserialize","content":"&lt;/&gt; Serializer.Deserialize(Packet: { [1]: string, ...: Instance }) → {any} Reads the first byte of a packet section the &quot;section_type&quot; and continues deserialization from there. "},{"title":"Traits","type":0,"sectionRef":"#","url":"/Lagoon/api/Traits","content":"On this page Traits Module containing references to built-in traits. Built-in traits: Network is for networking either across the boundary or within it Logger is used for logging information in a production or development environment. TraitBase is the base class used for all traits.","keywords":""},{"title":"TraitBase","type":0,"sectionRef":"#","url":"/Lagoon/api/TraitBase","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TraitBase","url":"/Lagoon/api/TraitBase#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TraitBase","url":"/Lagoon/api/TraitBase#new","content":"&lt;/&gt; TraitBase.new(Module: T) → T Creates a new userdata to serve as a trait container. "},{"title":"Known Problems","type":0,"sectionRef":"#","url":"/Lagoon/docs/bugs","content":"","keywords":""},{"title":"Fix List​","type":1,"pageTitle":"Known Problems","url":"/Lagoon/docs/bugs#fix-list","content":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/","content":"","keywords":""},{"title":"More information​","type":1,"pageTitle":"Installation","url":"/Lagoon/docs/installation/#more-information","content":"If you need more info on how to install Lagoon, there are installation guides for Wally and Studio "},{"title":"Studio Setup","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/studio","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#prerequisites","content":"Roblox Studio "},{"title":"Installation​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-1","content":"Go to the releases and download the file named &quot;Lagoon.rbxm&quot;  "},{"title":"Step 2​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-2","content":"Drag and drop the &quot;Lagoon.rbxm&quot; file into studio. "},{"title":"Step 2.5 (Can't drag and drop)​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-25-cant-drag-and-drop","content":"Right click on the workspace and click &quot;Insert from File...&quot;  Afterward locate the downloaded file and click open.  The module will be added into the workspace and you can place the module wherever you want. "},{"title":"Network","type":0,"sectionRef":"#","url":"/Lagoon/api/Network","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#types","content":" "},{"title":"MiddlewareEntry​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#MiddlewareEntry","content":"&lt;/&gt; interface MiddlewareEntry { Inbound: Array&lt;MiddlewareCallback&gt;, Outbound: Array&lt;MiddlewareCallback&gt;, }   "},{"title":"MiddlewareCallback​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#MiddlewareCallback","content":"&lt;/&gt; type MiddlewareCallback = (...any) → boolean?   "},{"title":"NetworkPoolItem<T>​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#NetworkPoolItem<T>","content":"&lt;/&gt; interface NetworkPoolItem&lt;T&gt; { Connection: RBXScriptConnection?, Handlers: Array&lt;MiddlwareCallback&gt;, IsAttached: boolean, Middleware: MiddlewareEntry, Ref: T }  "},{"title":"Properties​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#properties","content":" "},{"title":"Serializer​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Serializer","content":"&lt;/&gt; Network.Serializer: Serializer   "},{"title":"JSON​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#JSON","content":"&lt;/&gt; Network.JSON: JSON  "},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#functions","content":" "},{"title":"CreateSignal​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateSignal","content":"&lt;/&gt; Network:CreateSignal(Name: string) → PoolItem&lt;Signal&gt; Appends a signal with the given name to the net pool.  "},{"title":"CreateEvent​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateEvent","content":"&lt;/&gt; Network:CreateEvent( Name: string, IsUnreliable:: boolean? ) → PoolItem&lt;RemoteEvent &gt; Appends a RemoteEvent with the given name to the net pool.  "},{"title":"CreateFunction​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateFunction","content":"&lt;/&gt; Network:CreateFunction(Name: string) → RemoteFunction  Appends a RemoteFunction with the given name to the net pool.  "},{"title":"WaitFor​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#WaitFor","content":"&lt;/&gt; Network:WaitFor( Name: string, Timeout: number? ) → NetworkPoolItem&lt;RemoteEvent | RemoteFunction | Signal&lt;any&gt;&gt;?   "},{"title":"AddMiddleware​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#AddMiddleware","content":"&lt;/&gt; Network:AddMiddleware( Name: string, ...: Middleware ) → ()   "},{"title":"Connect​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Connect","content":"&lt;/&gt; Network:Connect( Name: string, Callback: (...any) → () ) → RBXScriptConnection?  Connects a callback function to a Signal or RemoteEvent  "},{"title":"Once​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Once","content":"&lt;/&gt; Network:Once( Name: string, Callback: (...any) → () ) → RBXScriptConnection?  Connects a callback function to a Signal or RemoteEvent once  "},{"title":"Bind​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Bind","content":"&lt;/&gt; Network:Bind( Name: string, Callback: (..any) → () ) → () Sets a callback for a RemoteFunction  "},{"title":"Fire​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Fire","content":"&lt;/&gt; Network:Fire( Name: string, ...: any ) → ()   "},{"title":"Invoke​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Invoke","content":"&lt;/&gt; Network:Invoke( Name: string, ...: any ) → any  "},{"title":"Wally Setup","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/wally","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#prerequisites","content":"AftmanRojoWally "},{"title":"Installation​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-1","content":"After downloading / installing Aftman, Rojo, and Wally head over to Lagoon's wally page. You should see a gray-ish box as seen here.Click that box to copy the package install to your clipboard. "},{"title":"Step 2​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-2","content":"Paste the package install text into the dependencies part of your wally.toml file and rename the package with an appropriate casing style.  "},{"title":"Step 3​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-3","content":"Run the commandwally install "},{"title":"Step 4​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-4","content":"If you haven't already make sure to add the Packages folder into your default.project.json like this. Example code: &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; }  "},{"title":"Limitations","type":0,"sectionRef":"#","url":"/Lagoon/docs/limitations","content":"","keywords":""},{"title":"Networking​","type":1,"pageTitle":"Limitations","url":"/Lagoon/docs/limitations#networking","content":"When a RemoteFunction handler returns a response the outbound middleware is not called at all this could be fixed but it doesn't seem crazy important at this time. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Lagoon/docs/getting-started","content":"","keywords":""},{"title":"Installation Guides​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#installation-guides","content":"StudioWally "},{"title":"Steps to Success​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#steps-to-success","content":""},{"title":"Creating your first Service​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#creating-your-first-service","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyService = {} function MyService.Print() print(&quot;Hello from the server!&quot;) end return Lagoon.MakeService(MyService)  "},{"title":"Creating a controller​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#creating-a-controller","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyController = {} function MyController.Print() print(&quot;Hello from the client!&quot;) end return Lagoon.MakeService(MyController)  "},{"title":"Adding traits to a service​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#adding-traits-to-a-service","content":"MyCustomTrait.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = {} function MyCustomTrait.Sum(a: number, b: number) return a + b end return Lagoon.MakeTrait(MyCustomTrait)  MyService.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = require(Path.To.MyCustomTrait) local MyService = {} MyService.A = 1 MyService.B = 2 function MyService:Print() print(`Sum: {self.Sum(self.A, self.B)}`) end return Lagoon.MakeController(MyService):ApplyTrait(MyCustomTrait)  "},{"title":"About","type":0,"sectionRef":"#","url":"/Lagoon/docs/intro","content":"","keywords":""},{"title":"How does it compare to other frameworks?​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#how-does-it-compare-to-other-frameworks","content":"Lagoon itself can be used as a framework to support a game's infrastructure, but unlike frameworks such as Knit that require integration into the entire game, Lagoon does not require complete game integration and at most requires integration into the module you use to define a Service or Controller. "},{"title":"Services v Controllers​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#services-v-controllers","content":""},{"title":"Services​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#services","content":"Services are modules that can only be used on the Server and on the client. "},{"title":"Controllers​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#controllers","content":"Controllers differ from Services because they can only be used on the client "},{"title":"Do I Need to wrap everything in the Lagoon API???​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#do-i-need-to-wrap-everything-in-the-lagoon-api","content":"Put simply no, if you have a module that will not need access to traits you can declare the module the same as if you weren't using Lagoon at all. If you still want to have the benefit of runtime initialization you can just add an Init method to the module and Lagoon.Load will treat it the same. Example: -- Modules/MyModule.luau: local Module = {} function Module:Init() print(&quot;This module got initialized as well!&quot;) end return Module -- init.server.luau: Lagoon.Load(script.Modules)  info The best time to use a trait is when you need to have methods or properties accessible to both the server and client. "},{"title":"What are traits?​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#what-are-traits","content":"Traits are simply put, modules that services and controllers can inherit methods and properties from. "}]