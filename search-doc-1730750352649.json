[{"title":"Logger","type":0,"sectionRef":"#","url":"/Lagoon/api/Logger","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#types","content":" "},{"title":"LogOptions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogOptions","content":"&lt;/&gt; interface LogOptions { Name: string?, Debug: boolean?, Timestamp: boolean?, }  "},{"title":"Properties​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#properties","content":" "},{"title":"LogOptions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogOptions","content":"&lt;/&gt; Logger.LogOptions: LogOptions  "},{"title":"Functions​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#functions","content":" "},{"title":"Log​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#Log","content":"&lt;/&gt; Logger:Log( Context: LogContext, ...: any ) → () "},{"title":"Types","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger##","content":""},{"title":"​","type":1,"pageTitle":"Logger","url":"/Lagoon/api/Logger#LogContext","content":"type LogContext = &quot;Debug&quot; | &quot;Info&quot; | &quot;Warn&quot; | &quot;Error&quot; | &quot;Fatal&quot;  Displays message(s) in the output. info Debug logs can change context provided there is a delimeter for example 'Debug/Info' while the primary context will be 'Debug' the displayed context will be 'Info' "},{"title":"Traits","type":0,"sectionRef":"#","url":"/Lagoon/api/Traits","content":"On this page Traits Module containing references to built-in traits. Built-in traits: Network is for networking either across the boundary or within it Logger is used for logging information in a production or development environment.","keywords":""},{"title":"Lagoon","type":0,"sectionRef":"#","url":"/Lagoon/api/Lagoon","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#functions","content":" "},{"title":"MakeService​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#MakeService","content":"&lt;/&gt; Lagoon.MakeService(Module: T) → Service&amp;T Takes in a table for the 'Module' parameter and wraps the module with a Lagoon Service. Usage: MyService.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyService = {} MyService.IsService = true function MyService.PrintFromServer() print(&quot;Hello from the server!&quot;) end return Lagoon.MakeService(MyService)   "},{"title":"MakeController​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#MakeController","content":"&lt;/&gt; Lagoon.MakeController(Module: T) → Controller &amp;T Takes in a table for the 'Module' parameter and wraps the module with a Lagoon Controller. Usage: MyController.lua -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyController = {} MyController.IsController = true function MyController.PrintFromClient() print(&quot;Hello from the client!&quot;) end return Lagoon.MakeController(MyController)   "},{"title":"Wrap​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#Wrap","content":"&lt;/&gt; Lagoon.Wrap(Module: T) → Module&amp;T Integrates a module into the lagoon environment  "},{"title":"Load​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#Load","content":"&lt;/&gt; Lagoon.Load(List: Instance | {Instance }) → () Requires and initializes the Parent's children.  "},{"title":"Get​","type":1,"pageTitle":"Lagoon","url":"/Lagoon/api/Lagoon#Get","content":"&lt;/&gt; Lagoon.Get(Name: string) → any  warning Function provides no typesafety. "},{"title":"Known Problems","type":0,"sectionRef":"#","url":"/Lagoon/docs/bugs","content":"","keywords":""},{"title":"Fix List​","type":1,"pageTitle":"Known Problems","url":"/Lagoon/docs/bugs#fix-list","content":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/","content":"","keywords":""},{"title":"More information​","type":1,"pageTitle":"Installation","url":"/Lagoon/docs/installation/#more-information","content":"If you need more info on how to install Lagoon, there are installation guides for Wally and Studio "},{"title":"Studio Setup","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/studio","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#prerequisites","content":"Roblox Studio "},{"title":"Installation​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-1","content":"Go to the releases and download the file named &quot;Lagoon.rbxm&quot;  "},{"title":"Step 2​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-2","content":"Drag and drop the &quot;Lagoon.rbxm&quot; file into studio. "},{"title":"Step 2.5 (Can't drag and drop)​","type":1,"pageTitle":"Studio Setup","url":"/Lagoon/docs/installation/studio#step-25-cant-drag-and-drop","content":"Right click on the workspace and click &quot;Insert from File...&quot;  Afterward locate the downloaded file and click open.  The module will be added into the workspace and you can place the module wherever you want. "},{"title":"Network","type":0,"sectionRef":"#","url":"/Lagoon/api/Network","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#types","content":" "},{"title":"MiddlewareEntry​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#MiddlewareEntry","content":"&lt;/&gt; interface MiddlewareEntry { Inbound: Array&lt;MiddlewareCallback&gt;, Outbound: Array&lt;MiddlewareCallback&gt;, }   "},{"title":"MiddlewareCallback​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#MiddlewareCallback","content":"&lt;/&gt; type MiddlewareCallback = (...any) → boolean?   "},{"title":"NetworkPoolItem<T>​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#NetworkPoolItem<T>","content":"&lt;/&gt; interface NetworkPoolItem&lt;T&gt; { Middleware: MiddlewareEntry, Ref: T }  "},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#functions","content":" "},{"title":"CreateSignal​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateSignal","content":"&lt;/&gt; Network:CreateSignal(Name: string) → PoolItem&lt;Signal&gt; Appends a signal with the given name to the net pool.  "},{"title":"CreateEvent​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateEvent","content":"&lt;/&gt; Network:CreateEvent( Name: string, IsUnreliable:: boolean? ) → PoolItem&lt;RemoteEvent &gt; Appends a RemoteEvent with the given name to the net pool.  "},{"title":"CreateFunction​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#CreateFunction","content":"&lt;/&gt; Network:CreateFunction(Name: string) → RemoteFunction  Appends a RemoteFunction with the given name to the net pool.  "},{"title":"Get​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Get","content":"&lt;/&gt; Network:Get( Name: string, Timeout: number? ) → NetworkPoolItem&lt;RemoteEvent | RemoteFunction | Signal&lt;any&gt;&gt;?   "},{"title":"WaitFor​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#WaitFor","content":"&lt;/&gt; Network:WaitFor( Name: string, Timeout: number? ) → NetworkPoolItem&lt;RemoteEvent | RemoteFunction | Signal&lt;any&gt;&gt;? Wraps around the :Get and passes a default timeout to :Get if one is not provided.  "},{"title":"AddMiddleware​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#AddMiddleware","content":"&lt;/&gt; Network:AddMiddleware( Name: string, ...: Middleware ) → ()   "},{"title":"Connect​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Connect","content":"&lt;/&gt; Network:Connect( Name: string, Callback: (...any) → () ) → RBXScriptConnection?  Connects a callback function to a Signal or RemoteEvent  "},{"title":"Once​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Once","content":"&lt;/&gt; Network:Once( Name: string, Callback: (...any) → () ) → RBXScriptConnection?  Connects a callback function to a Signal or RemoteEvent once  "},{"title":"Bind​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Bind","content":"&lt;/&gt; Network:Bind( Name: string, Callback: (..any) → () ) → () Sets a callback for a RemoteFunction  "},{"title":"Fire​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Fire","content":"&lt;/&gt; Network:Fire( Name: string, ...: any ) → ()   "},{"title":"Invoke​","type":1,"pageTitle":"Network","url":"/Lagoon/api/Network#Invoke","content":"&lt;/&gt; Network:Invoke( Name: string, ...: any ) → any  "},{"title":"Wally Setup","type":0,"sectionRef":"#","url":"/Lagoon/docs/installation/wally","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#prerequisites","content":"AftmanRojoWally "},{"title":"Installation​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-1","content":"After downloading / installing Aftman, Rojo, and Wally head over to Lagoon's wally page. You should see a gray-ish box as seen here.Click that box to copy the package install to your clipboard. "},{"title":"Step 2​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-2","content":"Paste the package install text into the dependencies part of your wally.toml file and rename the package with an appropriate casing style.  "},{"title":"Step 3​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-3","content":"Run the commandwally install "},{"title":"Step 4​","type":1,"pageTitle":"Wally Setup","url":"/Lagoon/docs/installation/wally#step-4","content":"If you haven't already make sure to add the Packages folder into your default.project.json like this. Example code: &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; }  "},{"title":"About","type":0,"sectionRef":"#","url":"/Lagoon/docs/intro","content":"","keywords":""},{"title":"Why Lagoon?​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#why-lagoon","content":""},{"title":"Simplicity​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#simplicity","content":"Lagoon is only as complex as you make it, due to it's barebones nature the complexity of the framework scales with your code! "},{"title":"Non Intrusive​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#non-intrusive","content":"Lagoon by design does not require complete integration into your project, and will function without using all the features. "},{"title":"Extensible​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#extensible","content":"Even with the few things Lagoon does provide, Lagoon makes it a point to give developers as much freedom over their systems as possible. "},{"title":"What are Services / Controllers?​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#what-are-services--controllers","content":"In the context of Lagoon they are just modules that run in the context of the server or client. Services are modules ran on the server and Controllers are modules ran on the client. "},{"title":"Do I Need to wrap everything in the Lagoon API???​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#do-i-need-to-wrap-everything-in-the-lagoon-api","content":"Put simply no, if you have a module that does not need to directly access the lagoon framework you can declare the module the same as if you weren't using Lagoon at all. If you still want to have the benefit of runtime initialization you can just add an Init method to the module and Lagoon.Load will treat it the same. Example: -- Modules/MyModule.luau: local Module = {} function Module:Init() print(&quot;This module got initialized as well!&quot;) end return Module -- init.server.luau: Lagoon.Load(script.Modules)  info The best time to use a trait is when you need to have methods, properties or a behavior accessible in multiple locations. "},{"title":"Where can I learn about traits?​","type":1,"pageTitle":"About","url":"/Lagoon/docs/intro#where-can-i-learn-about-traits","content":"A brief explanation can be found here "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Lagoon/docs/getting-started","content":"","keywords":""},{"title":"Installation Guides​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#installation-guides","content":"StudioWally "},{"title":"Steps to Success​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#steps-to-success","content":""},{"title":"Creating your first Service​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#creating-your-first-service","content":"In the context of Lagoon a service is a module required on the server, and can be defined using Lagoon.MakeService like in the example below: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyService = {} function MyService.Print() print(&quot;Hello from the server!&quot;) end return Lagoon.MakeService(MyService)  "},{"title":"Creating a controller​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#creating-a-controller","content":"On the other hand we have controllers which you may have expected are modules required on the client. Controllers can be created by calling Lagoon.MakeController like in the example: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyController = {} function MyController.Print() print(&quot;Hello from the client!&quot;) end return Lagoon.MakeService(MyController)  "},{"title":"Understanding Traits​","type":1,"pageTitle":"Getting Started","url":"/Lagoon/docs/getting-started#understanding-traits","content":"Traits are essentially modules that contain methods, functions, and fields that can be used by Services / Controllers. This reduces the need to copy + paste code and allows necessary abstractions to occur. In this example we create a Trait called 'MyCustomTrait' that has a function 'Sum' and takes in 2 arguments of type 'number'MyCustomTrait.luau -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = {} function MyCustomTrait.Sum(a: number, b: number) return a + b end return Lagoon.MakeTrait(MyCustomTrait)  We can access our 'Sum' function by applying the trait to something like a Service.MyService.luau -- This is in a ModuleScript local Lagoon = require(ReplicatedStorage.Packages.Lagoon) local MyCustomTrait = require(Path.To.MyCustomTrait) local MyService = {} MyService.A = 1 MyService.B = 2 -- self = MyService function MyService:Print() -- We now have access to self.Sum due to inheriting 'MyCustomTrait' print(`Sum: {self.Sum(self.A, self.B)}`) end return Lagoon.MakeController(MyService):ApplyTrait(MyCustomTrait)  In the code above we use :ApplyTrait which iterates over the trait and essentially merges MyService and MyCustomTrait giving access to our 'Sum' function. "}]