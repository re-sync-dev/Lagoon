"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),g=a,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},99390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2},i="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Installation Guides",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/Lagoon/docs/getting-started",draft:!1,editUrl:"https://github.com/re-sync-dev/Lagoon/edit/main/docs/getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"About",permalink:"/Lagoon/docs/intro"},next:{title:"Installation",permalink:"/Lagoon/docs/installation/"}},c={},s=[{value:"Installation Guides",id:"installation-guides",level:2},{value:"Steps to Success",id:"steps-to-success",level:2},{value:"Creating your first Service",id:"creating-your-first-service",level:3},{value:"Creating a controller",id:"creating-a-controller",level:3},{value:"Understanding Traits",id:"understanding-traits",level:3}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("h2",{id:"installation-guides"},"Installation Guides"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/installation/studio"},"Studio")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/installation/wally"},"Wally"))),(0,a.kt)("h2",{id:"steps-to-success"},"Steps to Success"),(0,a.kt)("h3",{id:"creating-your-first-service"},"Creating your first Service"),(0,a.kt)("p",null,"In the context of Lagoon a service is a module required on the server, and can be defined using ",(0,a.kt)("inlineCode",{parentName:"p"},"Lagoon.MakeService")," like in the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Lagoon = require(ReplicatedStorage.Packages.Lagoon)\n\nlocal MyService = {}\n\nfunction MyService.Print()\n    print("Hello from the server!")\nend\n\nreturn Lagoon.MakeService(MyService)\n')),(0,a.kt)("h3",{id:"creating-a-controller"},"Creating a controller"),(0,a.kt)("p",null,"On the other hand we have controllers which you may have expected are modules required on the client. Controllers can be created by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"Lagoon.MakeController")," like in the example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Lagoon = require(ReplicatedStorage.Packages.Lagoon)\n\nlocal MyController = {}\n\nfunction MyController.Print()\n    print("Hello from the client!")\nend\n\nreturn Lagoon.MakeService(MyController)\n')),(0,a.kt)("h3",{id:"understanding-traits"},"Understanding Traits"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Trait_(computer_programming)#Rationale"},"Traits")," are essentially modules that contain methods, functions, and fields that can be used by Services / Controllers. This reduces the need to copy + paste code and allows necessary abstractions to occur."),(0,a.kt)("p",null,"In this example we create a Trait called 'MyCustomTrait' that has a function 'Sum' and takes in 2 arguments of type 'number'\n",(0,a.kt)("strong",{parentName:"p"},"MyCustomTrait.luau")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- This is in a ModuleScript\nlocal Lagoon = require(ReplicatedStorage.Packages.Lagoon)\n\nlocal MyCustomTrait = {}\n\nfunction MyCustomTrait.Sum(a: number, b: number)\n    return a + b\nend\n\nreturn Lagoon.MakeTrait(MyCustomTrait)\n")),(0,a.kt)("p",null,"We can access our 'Sum' function by applying the trait to something like a Service.\n",(0,a.kt)("strong",{parentName:"p"},"MyService.luau")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- This is in a ModuleScript\nlocal Lagoon = require(ReplicatedStorage.Packages.Lagoon)\nlocal MyCustomTrait = require(Path.To.MyCustomTrait)\n\nlocal MyService = {}\nMyService.A = 1\nMyService.B = 2\n\n-- self = MyService\nfunction MyService:Print()\n    -- We now have access to self.Sum due to inheriting 'MyCustomTrait'\n    print(`Sum: {self.Sum(self.A, self.B)}`)\nend\n\nreturn Lagoon.MakeController(MyService):ApplyTrait(MyCustomTrait)\n")),(0,a.kt)("p",null,"In the code above we use ",(0,a.kt)("inlineCode",{parentName:"p"},":ApplyTrait")," which iterates over the trait and essentially merges ",(0,a.kt)("inlineCode",{parentName:"p"},"MyService")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MyCustomTrait")," giving access to our 'Sum' function."))}d.isMDXComponent=!0}}]);