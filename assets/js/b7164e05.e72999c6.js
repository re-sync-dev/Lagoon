"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{53432:e=>{e.exports=JSON.parse('{"functions":[{"name":"Serialize","desc":"Utilizes [Squash](https://data-oriented-house.github.io/Squash/) for packet serialization and adds a byte to the beginning of a packet section to indicate what type the object was.\\n\\n**Packet Section:** `<section_type><data>`\\n\\nThere are special section types specifically for Instances and Tables\\n\\n**Instance:** `<section_type><index>` - The index represents a point in the packet after the packet string`\\n\\n**Table:** `<section_type><encoded_table>` - The table is encoded using Roblox\'s JSON functions (This might be changed in the future to use a type of lossless compression to save on bandwidth)\\n\\nFrom some basic tests that were run using a packet that was sending an instance reference and a bunch of relevant color information & CFrames saved around ~1.1KB in bandwidth.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"{ [1]: string, ...: Instance }"}],"function_type":"static","source":{"line":78,"path":"src/Traits/Network/Serializer.luau"}},{"name":"Deserialize","desc":"Reads the first byte of a packet section the \\"section_type\\" and continues deserialization from there.","params":[{"name":"Packet","desc":"","lua_type":"{ [1]: string, ...: Instance }"}],"returns":[{"desc":"","lua_type":"{ any }"}],"function_type":"static","source":{"line":122,"path":"src/Traits/Network/Serializer.luau"}}],"properties":[],"types":[],"name":"Serializer","desc":"Utility module used by the Network for serializing data.","source":{"line":56,"path":"src/Traits/Network/Serializer.luau"}}')}}]);